{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LM = motor(PORT12, true);\nmotor RM = motor(PORT6, false);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n#include <string>\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//char driver_input[] = \"0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#1/0#66/0#69/0#69/0#69/0#69/0#61/0#45/0#34/0#30/0#30/0#25/0#25/0#26/0#64/0#64/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/0#100/2#81/70#1/100#1/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/100#0/38#0/38#0/0#0/0#0/0#-3/0#-3/0#-3/0#-3/0#-3/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#-14/0#-35/0#-51/0#-67/0#-67/0#-88/0#-97/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/82#-100/82#-100/82#-100/100#-100/100#-100/100#-100/100#-100/100#-100/100#-100/100#-100/100#-100/100#-100/100#-100/100#-100/100#-100/100#-100/-15#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-100/0#-53/0#-20/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#0/0#\";\n\nint main() {\n  // Begin project code\n  int i = 0;\n \n  int j = 1;\n  LM.setStopping(hold);\n  RM.setStopping(hold);\n  while(Brain.SDcard.exists((\"data\"+std::to_string(j)+\".txt\").c_str())) {\n    // LM.spin(forward);\n    // RM.spin(forward);\n    char driver_input[300];\n    Brain.SDcard.loadfile((\"data\"+std::to_string(j)+\".txt\").c_str(), (uint8_t*)driver_input, sizeof(driver_input)); \n    printf(\"%s\\n\", (\"data\"+std::to_string(j)+\".txt\").c_str());\n    printf(\"%s\\n\", driver_input);\n    j++;\n    i = 0;\n    while (driver_input[i] != '*'){\n      float mulY = 1.0, mulX = 1.0;\n      std::string YInp = \"\", XInp = \"\";\n      while(driver_input[i] != '/'){\n        if(driver_input[i] == '-'){\n          mulY = -1.0;\n          i+=1;\n          continue;\n        }\n        YInp += driver_input[i];\n        i+=1;\n      }\n      i+=1;\n      while(driver_input[i] != '#'){\n        if(driver_input[i] == '-'){\n          i+=1;\n          mulX = -1.0;\n          continue;\n        }\n        XInp += driver_input[i];\n        i+=1;\n      }\n      i+=1;\n      float XInp_ = stof(XInp)*mulX, YInp_ = stof(YInp)*mulY;\n      printf(\"%.1f\", YInp_);\n      printf(\" \");\n      printf(\"%.1f\\n\", XInp_);\n      LM.spinToPosition(YInp_, degrees, false);\n      RM.spinToPosition(XInp_, degrees, false);\n      LM.setVelocity(YInp_, percent);\n      RM.setVelocity(XInp_, percent);\n      wait(10, msec);\n    }\n  }\n  printf(\"done\\n\");\n}\n","textLanguage":"cpp","rconfig":[{"port":[12],"name":"LM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"RM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":4,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}